Constructor Dependency Injection, with PicoContainer 
NanoContainer
By the PicoContainer Committers and friends, (c) the PicoContainer committers. Draft edition of %%date(%c)

= NanoContainer & JMX =

... todo quick JMX overview ....

Manageability of objects is important and the NanoContainers JMX module makes integrating JMX with pico easy. Lets first start 
doing a simple example that should be relatively straight forward.

Suppose we have a simple object that we want to expose via JMX:

{snippet:id=class|url=@BOOK_MODULE_URL@/java/cdibook/jmx/SampleService.java|lineNumbers=false}

We will need to define an MBeanInfo:

{snippet:id=mbeaninfo|url=@BOOK_MODULE_URL@/java/cdibook/jmx/JmxTestCase.java|lineNumbers=false}

Now we need to register the mBeanInfo to JMXVisitor. <<todo blurb on JMXVistor>>
An MBeanInfo must be registered to MBeanServer by a unique ObjectName:

{snippet:id=jmxvisitor|url=@BOOK_MODULE_URL@/java/cdibook/jmx/JmxTestCase.java|lineNumbers=false}

Register the MBeanServer, the instance to be exposed through JMX with PicoContainer. Then ask pico to accept the
jmxVisitor so that management objects can be registered to the MBeanServer.

{snippet:id=register|url=@BOOK_MODULE_URL@/java/cdibook/jmx/JmxTestCase.java|lineNumbers=false}

Note:
    - The instance of the MBeanServer the MBean should be regestered to, must be registered to PicoContainer.
    - calling pico.accept(JMXVisitor) on the container must occur after all dependencies and the MBeanServer have been registered to pico.


== DynamicMBean vs. StandardMBean ==

DynamicMBean is practical when a developer programatically creates an MBeanInfo to define the management of an instance.

StandardMBean can be used when an interface should be used to define the manageability of an instance.

== JMX with Groovy ==

Utilizing JMX with nano is even easier from a groovy script....

