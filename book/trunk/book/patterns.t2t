Constructor Dependency Injection, with PicoContainer
Design Patterns
By the PicoContainer Committers and friends, (c) the PicoContainer committers. Draft edition of %%date(%c)

= Design Patterns =

== What is a Design Pattern ? ==

A Design Pattern is a solution to a commonly found development issue. It is named after the solution.  Singleton, Factory etc etc.

This chapter deals with true patterns and pseudo patterns pertinent to IoC and CDI.

== Applicable Design Patterns For CDI ==

=== Interface & Implementation separation ===

Taken from ...
http://cvs.apache.org/viewcvs.cgi/avalon/src/xdocs/framework/Attic/separation-of-interface-and-implementation.xml?hideattic=0
.. (1.3) original donation by Paul to Apache - 6th April 2002

The core concept of interface and implementation separation is built into
Java itself in that it has interfaces and classes.  Many toolkits have
been developed along the lines of an API / implementation separation.
One such toolkit is the SAX API and the multiple XML parsers that implement
it. Developers are quite happy using Apache's Xerces via the SAX API and
understand that SAX represents the interface and Xerces an implementation.
We notice that a lot of developers are happy to use interface/impl
separated tools, but not to make them.  We will try to justify in this
document why we think people making applications should define
interface/impl boundaries early in the design cycle.

==== Justification ====

The main reason we do it is because:
  it forces you to decouple different modules/components/objects
  if specified correctly allows you to easily change the implementation of the interface/contract in the future
  makes it possible for a user to read documentation about interface without having the implementation details clutter up their
  perception
  increases the possibility of reuse in a larger application

If you are building objects with the aim of reuse then [2] is important but
most people don't build for reuse (and most XP advocates say you should just
plan to use not reuse) and thus [1] and [2] are more important. If you feel
like documenting that and expanding this then feel free to.

==== Example ====

Let us hope this is not necessary:

{snippet:id=class|url=@BOOK_MODULE_URL@/java/cdibook/patterns/helloworld/HelloWorld.java|lineNumbers=true}

{snippet:id=class|url=@BOOK_MODULE_URL@/java/cdibook/patterns/helloworld/impl/defaults/DefaultHelloWorld.java|lineNumbers=true}

{snippet:id=class|url=@BOOK_MODULE_URL@/java/cdibook/patterns/helloworld/impl/remote/RemoteHelloWorld.java|lineNumbers=true}

We are referring to this pattern at <strong>interface/impl separation</strong>.
Wiley's Patterns in Java book refers to it simply as 'Interface', but we feel
that the word interface is overloaded enough in English and computing.

It might be true to say that this is 'API/implementation separation', but
this too could be confusing as the aforementioned SAX is not quite a
pure set of interfaces. It has a static factory that thunks in an
implementation that all subsequent calls to the factory method will be
forced to use. See Anto-patterns below.

Better might be 'separation of implementation and the interface/contract' as
that is quite correct, but a tad unwieldy.

=== Implementation hiding ===

If a component is split into interface and implementation, and that is all that is done, it is possible for an instance of
that interface to cast it back to its implementation class. Once cast, methods and member variables not published through the
interface can be invoked.

This is undesirable for a number of reasons:

==== Compromising separations ====

An application may have been engineered into a number of sub-projects and hence jars and composed at run time. The sub-project for
say biziness logic, may import directly the persistence API. For testing purposes, that project invokes a speedier mock/stub
implmentation of the persistence API. At deployment time, the real persistence implementation is used of course.

If a lazy biz logic team wanted some feature of the real persistence implementation that was not published through the persistence
API, they could in some cases cast the instance back to the implementation and use the functionality they wanted.

If the implementation is very well hidden, though, this will not be possible.

==== Elminating pluggabble nature ====

TODO

==== Hiding Implementations ====

A simple way of hiding an implementation is to make a dynamic proxy for an instance of the class.  Dynamic proxies have been
available in Java since J2SE 1.3.  Let us explore this in code.
Consider an interface ```Foo``` and and Implementation of that interface ```DefaultFoo```:

{snippet:id=intro|url=@BOOK_MODULE_URL@/java/cdibook/patterns/implhiding/ExampleProxyTestCase.java|lineNumbers=true}

The above is fairly simple. It is important to note that the method ```doBar()``` is not specified on the interface.

There are only a few lines needed to setup a dynamic proxy using reflection. These below are part of the setup of a unit test that
demonstrates the nature of implementation hiding. Thus ```foo``` and ```fooProxy``` are member variables:

{snippet:id=setup|url=@BOOK_MODULE_URL@/java/cdibook/patterns/implhiding/ExampleProxyTestCase.java|lineNumbers=true}

The first test that demonstrates the functionality of dynamic proxies is one that sets some context. Without dynamic proxies,
```doBar()``` cannot be adequately hidden from a object that has a refernece to it that is simply an abstraction:

{snippet:id=1|url=@BOOK_MODULE_URL@/java/cdibook/patterns/implhiding/ExampleProxyTestCase.java|lineNumbers=true}

This second test shows that casting back to implementation is not possible for dynamic proxy hidden instances:

{snippet:id=2|url=@BOOK_MODULE_URL@/java/cdibook/patterns/implhiding/ExampleProxyTestCase.java|lineNumbers=true}

This third test shows that there is no way to bypass the hidden nature of the implementation. Reflection can be used to invoke non-
interface methods of ```foo```, but not on ```foorProxy```:

{snippet:id=3|url=@BOOK_MODULE_URL@/java/cdibook/patterns/implhiding/ExampleProxyTestCase.java|lineNumbers=true}

=== Advanced Hiding of Implementations ===

Reflection based dynamic proxies can be slightly slower in use than no-proxy scenarios. There are tools like ProxyToys
(http://proxytoys.codehaus.org) that can make faster dynamic proxies. To all intents and purposes, the resulting class will be
identical to that generated by :

{snippet:id=coded|url=@BOOK_MODULE_URL@/java/cdibook/patterns/implhiding/ExampleProxyTestCase.java|lineNumbers=true}

In terms of security, to totally hide ```DefaultFoo``` though, you need to mount the classes for the implementation in a classloader
that is completely inaccessible to the user of the dynamic proxied instance. TODO

{ old words -
 To do this, it is easiest to mount the impl classes in a separate classloader
 to the classloader that the interface-using classes are mounted in.  The
 interfaces being mounted in a classloader that is visible to both.

 This is not a new proposition.  Sun defined the servlet spec, and included
 rules about implementation hiding for hosted servlets.  Essentially,
 instantiated servlets are only allowed to 'see' classes from the JDK, their
 own WAR file and those of the Servlet API itself.  Tomcat correctly hides
 the implementation of the Servlet API from the hosted servlets.

 To actually achieve this separation, many containers require that the interface and impl are in separate jars.
 Or to put it another way, there is little point separating your interface and impl
 classes if you are going to distribute them in the same jar.
}

==== Hosting Components ====

It is common for TODO

This is building on the previous section, and in short is referred to as K/CAPI/HC.
Basically the Kernel mounts hosted components and satisfies their need for a
client API. However the kernel wants to hide its implementation from the hosted
components.

An EJB container is another good example of this.  EntityBean, SessionBean etc is
the client API.  The hosted components are the beans, and the container has a
kernel.  It builds a complex tree of classloaders to separate its implementation,
the client API, the JDK's runtime jar (that always being in the system or
primordial classloader), and the hosted components.

The central message of this is that it you have interface/impl separated your
tool, and are doing tricky things with more classloaders in the implementation,
please make sure ytou do not assume that the parent classloader of any classloader
is the system classoader.  If your reusable tool has been taken by another team
and at some non root place in a classloader tree, then the tools will fail if
you have made such assumptions.

==== Interface/Implementation Separation ====

SAX, mentioned in multiple contexts in this chapter, is also an example of
where the design can go wrong.  The Factory is static (that in itself is an
anti-pattern to IoC).  Despite giving the appearance of having the ability
to generate a parser based on the implementation's class name, only the first
caller of that method will register a parser for the whole environment to use.

Given that the SAX API is now in the JDK, the environment we allude to above
is the whole JVM.  This is a problem because in a very complex application
with differing concurrent needs for implementation of parsers, not all can be
met if the SAX API is used for making parsers.

== Applicable Maxims For CDI ==

=== Separation Of Concerns ===













