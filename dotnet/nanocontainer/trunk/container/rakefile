require 'CSProjFile.rb'

def build(*relative_path)
	File.join("src","build",relative_path)
end

def lib(relative_path)
	File.join("lib",relative_path)
end

projects = %w(NanoContainer NanoContainer.Tests TestComp TestComp2 NotStartable TestCompWithAttributes)
library = %w(NUnit.Framework PicoContainer Castle.DynamicProxy NMock Boo.Lang.CodeDom Boo.Lang.Parser Boo.Lang.Compiler Boo.Lang)

task :default => [:compile, :test]
task :all => [:clean, :default]

task :clean do 
	rm_rf(build)
	projects.each {|project| rm_rf("src/#{project}/bin")}
end

task :precompile do
	mkdir_p(build) unless File.exists?(build)
	library.each do |f|
		libFile = f + ".dll"
		cp(lib(libFile), build) unless uptodate?(build(libFile), lib(libFile))
	end
end

task :compile => :precompile do
	def _compile(project)
		projFile = CSProjFile.new(File.new("src/#{project}/#{project}.csproj"))
		unless uptodate?("#{build(project)}.dll",projFile.files.collect {|f| "src/#{project}/#{f}" })
			cd "src/#{project}"
			sh projFile.create_csc("../build")
			cd "../.."
		end
	end
	projects.each {|project| _compile(project)}
end

task :pretest do
	def copyTo(file, dir)
		cp("#{file}.dll", dir)
	end
	projects.each do |project|
		debugDir = "src/#{project}/bin/Debug"
		projectDll = "#{project}.dll"
		mkdir_p(debugDir) unless File.exists?(debugDir)
		unless uptodate?("#{debugDir}/#{projectDll}",build(projectDll))
			library.each {|file| copyTo(lib(file),debugDir)}
			projects.each {|file| copyTo(build(file),debugDir)}
		end
	end
end

task :test => [:compile,:pretest] do
	cd "src/NanoContainer.Tests/bin/Debug"
	sh "../../../../lib/nunit-console.exe NanoContainer.Tests.dll"
end