/* ====================================================================
 * Copyright 2005 NanoContainer Committers
 * Portions copyright 2001 - 2004 Apache Software Foundation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */
package org.nanocontainer.remoting.test.async;

import junit.framework.TestCase;
import org.nanocontainer.remoting.client.Factory;
import org.nanocontainer.remoting.client.factories.ServerSideClassFactory;
import org.nanocontainer.remoting.client.transports.socket.SocketCustomStreamHostContext;
import org.nanocontainer.remoting.common.DefaultThreadPool;
import org.nanocontainer.remoting.server.PublicationDescription;
import org.nanocontainer.remoting.server.authenticators.DefaultAuthenticator;
import org.nanocontainer.remoting.server.classretrievers.JavacDynamicGeneratorClassRetriever;
import org.nanocontainer.remoting.server.monitors.NullServerMonitor;
import org.nanocontainer.remoting.server.transports.DefaultServerSideClientContextFactory;
import org.nanocontainer.remoting.server.transports.socket.CompleteSocketCustomStreamServer;

import java.io.File;

public class SimpleAsync2TestCase extends TestCase {

    AsyncTestImpl asyncTestImpl;
    AsyncTest testClient;
    Factory factory;
    CompleteSocketCustomStreamServer server;

    public SimpleAsync2TestCase(String name) {
        super(name);
    }

    /**
     * Fetch the directory to store the classes and java source generated by the dynamic class retrievers
     */
    private String getClassGenDir() {
        String class_gen_dir = System.getProperty("CLASS_GEN_DIR");
        if (class_gen_dir == null) {
            // (if not set, it defaults to current directory)
            class_gen_dir = ".";
        } else {
            //if the directory doesnt exist and it cannot be created then use the default
            File fileClassGenDir = new File(class_gen_dir);
            if (!fileClassGenDir.exists()) {
                boolean bDirCreated = fileClassGenDir.mkdirs();
                if (!bDirCreated) {
                    class_gen_dir = ".";
                }
            }
        }
        return class_gen_dir;
    }

    protected void setUp() throws Exception {
        super.setUp();

        // server side setup.
        JavacDynamicGeneratorClassRetriever cr = new JavacDynamicGeneratorClassRetriever(this.getClass().getClassLoader());
        String class_gen_dir = getClassGenDir();
        cr.setClassGenDir(class_gen_dir);
        cr.setSrcGenDir(class_gen_dir);
        /*<reason>ClassLoader picks the stuff from the parent classloader which has everything it needs
        String FS = File.separator;
        String PS = File.pathSeparator;

        String javaHomeString = System.getProperty("java.home");
        File javaHome = new File(javaHomeString);
        if (javaHomeString.endsWith(FS + "jre"))
        {
            javaHome = javaHome.getParentFile();
        }
        System.out.println("javaHome=" + javaHome.getAbsolutePath());
        cr.setClasspath(".." + FS + "build" + FS + "classes" + PS + javaHome.getAbsolutePath() + FS + "lib" + FS + "tools.jar");
        */

        server = new CompleteSocketCustomStreamServer(cr, new DefaultAuthenticator(), new NullServerMonitor(), new DefaultThreadPool(), new DefaultServerSideClientContextFactory(), 11004);
        asyncTestImpl = new AsyncTestImpl();
        // automatic determination of async elements.
        PublicationDescription pd = new PublicationDescription(AsyncTest.class);
        cr.generate("AsyncTestB", pd, this.getClass().getClassLoader());
        server.publish(asyncTestImpl, "AsyncTestB", pd);
        server.start();

        // Client side setup
        factory = new ServerSideClassFactory(new SocketCustomStreamHostContext.WithSimpleDefaults("127.0.0.1", 11004), false);
        testClient = (AsyncTest) factory.lookup("AsyncTestB");

        // just a kludge for unit testing given we are intrinsically dealing with
        // threads, NanoContainer Remoting being a client/server thing
        Thread.yield();
    }

    public void testSimpleAsync() throws Exception {

        testClient.setOne("one");
        testClient.setTwo("two");
        testClient.setThree("three");

        assertNull("Field 'One' should be null", asyncTestImpl.one);
        assertNull("Field 'Two' should be null", asyncTestImpl.two);
        assertNull("Field 'Tree' should be null", asyncTestImpl.three);
        assertFalse("Field 'Fire' should be false", asyncTestImpl.fired);

        testClient.fire();

        assertNotNull("Field 'One' should not be null", asyncTestImpl.one);
        assertNotNull("Field 'Two' should not be null", asyncTestImpl.two);
        assertNotNull("Field 'Tree' should not be null", asyncTestImpl.three);
        assertTrue("Field 'Fire' should not be false", asyncTestImpl.fired);

    }

    public void testRollback() throws Exception {

        testClient.setOne("111");

        assertNull("Field 'One' should be null #1", asyncTestImpl.one);

        testClient.whoa();
        testClient.fire();

        assertNull("Field 'One' should be null #2", asyncTestImpl.one);
        assertTrue("Field 'Whoa' should not be false", asyncTestImpl.whoa);
        assertTrue("Field 'Fire' should not be false", asyncTestImpl.fired);

        testClient.setOne("222");
        testClient.fire();

        assertNotNull("Field 'One' should not be null", asyncTestImpl.one);

    }


    protected void tearDown() throws Exception {
        testClient = null;
        System.gc();
        Thread.yield();
        factory.close();
        Thread.yield();
        server.stop();
        Thread.yield();
        server = null;
        asyncTestImpl = null;
        super.tearDown();
    }

    public static void main(String[] args) throws Exception {
        SimpleAsync2TestCase simp = new SimpleAsync2TestCase("testSimpleAsync");
        simp.setUp();
        simp.testSimpleAsync();
        simp.tearDown();
    }

}
