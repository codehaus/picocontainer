/* ====================================================================
 * Copyright 2005 NanoContainer Committers
 * Portions copyright 2001 - 2004 Apache Software Foundation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */
package org.nanocontainer.remoting.test.bcel;

import org.nanocontainer.remoting.client.factories.ServerSideClassFactory;
import org.nanocontainer.remoting.client.transports.socket.SocketCustomStreamHostContext;
import org.nanocontainer.remoting.common.DefaultThreadPool;
import org.nanocontainer.remoting.server.PublicationDescription;
import org.nanocontainer.remoting.server.authenticators.DefaultAuthenticator;
import org.nanocontainer.remoting.server.classretrievers.BcelDynamicGeneratorClassRetriever;
import org.nanocontainer.remoting.server.monitors.ConsoleServerMonitor;
import org.nanocontainer.remoting.server.transports.DefaultServerSideClientContextFactory;
import org.nanocontainer.remoting.server.transports.socket.CompleteSocketCustomStreamServer;
import org.nanocontainer.remoting.test.AbstractHelloTestCase;
import org.nanocontainer.remoting.test.TestInterface;
import org.nanocontainer.remoting.test.TestInterface2;
import org.nanocontainer.remoting.test.TestInterface3;
import org.nanocontainer.remoting.test.TestInterfaceImpl;

import java.io.File;

/**
 * Test case which tests the proxies generated using BCEL generator
 *
 * @author Vinay Chandrasekharan
 */
public class BcelTestCase extends AbstractHelloTestCase {

    public BcelTestCase(String name) {
        super(name);
    }

    /**
     * Fetch the directory to store the classes and java source generated by the dynamic class retrievers
     */
    private String getClassGenDir() {
        String class_gen_dir = System.getProperty("CLASS_GEN_DIR");
        if (class_gen_dir == null) {
            // (if not set, it defaults to current directory)
            class_gen_dir = ".";
        } else {
            //if the directory doesnt exist and it cannot be created then use the default
            File fileClassGenDir = new File(class_gen_dir);
            if (!fileClassGenDir.exists()) {
                boolean bDirCreated = fileClassGenDir.mkdirs();
                if (!bDirCreated) {
                    class_gen_dir = ".";
                }
            }
        }
        return class_gen_dir;
    }

    protected void setUp() throws Exception {
        super.setUp();

        // server side setup.
        BcelDynamicGeneratorClassRetriever cr = new BcelDynamicGeneratorClassRetriever(this.getClass().getClassLoader());

        String class_gen_dir = getClassGenDir();
        cr.setClassGenDir(class_gen_dir);
        //cr.setClasspath("..\\build\\classes;%JAVA_HOME%\\lib\\tools.jar");
        cr.setSrcGenDir(class_gen_dir);
        server = new CompleteSocketCustomStreamServer(cr, new DefaultAuthenticator(), new ConsoleServerMonitor(), new DefaultThreadPool(), new DefaultServerSideClientContextFactory(), 10001);

        testServer = new TestInterfaceImpl();
        PublicationDescription pd = new PublicationDescription(TestInterface.class, new Class[]{TestInterface3.class, TestInterface2.class});
        cr.generate("Hello", pd, this.getClass().getClassLoader());
        server.publish(testServer, "Hello", pd);
        server.start();

        // Client side setup
        factory = new ServerSideClassFactory(new SocketCustomStreamHostContext.WithSimpleDefaults("127.0.0.1", 10001), false);
        testClient = (TestInterface) factory.lookup("Hello");

        // just a kludge for unit testing given we are intrinsically dealing with
        // threads, NanoContainer Remoting being a client/server thing
        Thread.yield();
    }


    protected void tearDown() throws Exception {
        testClient = null;
        System.gc();
        Thread.yield();
        factory.close();
        Thread.yield();
        server.stop();
        Thread.yield();
        server = null;
        testServer = null;
        super.tearDown();
    }


}
