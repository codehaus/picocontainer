<?xml version="1.0" encoding="UTF-8"?>

<project default="jar" name="nanocontainer" basedir=".">
  <property name="defaulttargetdir" value="target">
  </property>
  <property name="libdir" value="target/lib">
  </property>
  <property name="classesdir" value="target/classes">
  </property>
  <property name="testclassesdir" value="target/test-classes">
  </property>
  <property name="testreportdir" value="target/test-reports">
  </property>
  <property name="distdir" value="dist">
  </property>
  <property name="javadocdir" value="dist/docs/api">
  </property>
  <property name="final.name" value="nanocontainer-1.0-SNAPSHOT">
  </property>
  <target name="init" description="o Initializes some properties">
    <mkdir dir="${libdir}">
    </mkdir>
    <condition property="noget">
      <equals arg2="only" arg1="${build.sysclasspath}">
      </equals>
    </condition>
  </target>
  <target name="compile" description="o Compile the code" depends="get-deps">
    <mkdir dir="${classesdir}">
    </mkdir>
    <javac destdir="${classesdir}" deprecation="true" debug="true" optimize="false" excludes="**/package.html">
      <src>
        <pathelement location="${basedir}/src/java">
        </pathelement>
      </src>
      <classpath>
        <fileset dir="${libdir}">
          <include name="*.jar">
          </include>
        </fileset>
      </classpath>
    </javac>
  </target>
  <target name="jar" description="o Create the jar" depends="compile,test">
    <jar jarfile="target/${final.name}.jar" excludes="**/package.html" basedir="${classesdir}">
    </jar>
  </target>
  <target name="clean" description="o Clean up the generated directories">
    <delete dir="${defaulttargetdir}">
    </delete>
    <delete dir="${distdir}">
    </delete>
  </target>
  <target name="dist" description="o Create a distribution" depends="jar, javadoc">
    <mkdir dir="dist">
    </mkdir>
    <copy todir="dist">
      <fileset dir="${defaulttargetdir}" includes="*.jar">
      </fileset>
      <fileset dir="${basedir}" includes="LICENSE*, README*">
      </fileset>
    </copy>
  </target>
  <target name="test" description="o Run the test cases" if="test.failure" depends="internal-test">
    <fail message="There were test failures.">
    </fail>
  </target>
  <target name="internal-test" depends="compile-tests">
    <mkdir dir="${testreportdir}">
    </mkdir>
    <junit dir="./" failureproperty="test.failure" printSummary="yes" fork="true" haltonerror="true">
      <sysproperty key="basedir" value=".">
      </sysproperty>
      <formatter type="xml">
      </formatter>
      <formatter usefile="false" type="plain">
      </formatter>
      <classpath>
        <fileset dir="${libdir}">
          <include name="*.jar">
          </include>
        </fileset>
        <pathelement path="${testclassesdir}">
        </pathelement>
        <pathelement path="${classesdir}">
        </pathelement>
      </classpath>
      <batchtest todir="${testreportdir}">
        <fileset dir="${basedir}/src/test">
          <include name="**/*TestCase.java">
          </include>
        </fileset>
      </batchtest>
    </junit>
  </target>
  <target name="compile-tests" depends="compile">
    <mkdir dir="${testclassesdir}">
    </mkdir>
    <javac destdir="${testclassesdir}" deprecation="true" debug="true" optimize="false" excludes="**/package.html">
      <src>
        <pathelement location="${basedir}/src/test">
        </pathelement>
      </src>
      <classpath>
        <fileset dir="${libdir}">
          <include name="*.jar">
          </include>
        </fileset>
        <pathelement path="${classesdir}">
        </pathelement>
      </classpath>
    </javac>
  </target>
  <target name="javadoc" description="o Generate javadoc" depends="jar">
    <mkdir dir="${javadocdir}">
    </mkdir>
    <tstamp>
      <format pattern="2003-yyyy" property="year">
      </format>
    </tstamp>
    <property name="copyright" value="Copyright &amp;copy;  Codehaus. All Rights Reserved.">
    </property>
    <property name="title" value="NanoContainer 1.0-SNAPSHOT API">
    </property>
    <javadoc use="true" private="true" destdir="${javadocdir}" author="true" version="true" sourcepath="${basedir}/src/java" packagenames="nanocontainer.*">
      <classpath>
        <fileset dir="${libdir}">
          <include name="*.jar">
          </include>
        </fileset>
        <pathelement location="target/${final.name}.jar">
        </pathelement>
      </classpath>
    </javadoc>
  </target>
  <target name="get-deps" unless="noget" depends="init">
    <get dest="${libdir}/picocontainer-1.0-SNAPSHOT.jar" usetimestamp="true" ignoreerrors="true" src="http://dist.codehaus.org/picocontainer/jars/picocontainer-1.0-alpha-2-SNAPSHOT.jar">
    </get>
    <get dest="${libdir}/commons-collections-2.1.jar" usetimestamp="true" ignoreerrors="true" src="http://www.ibiblio.org/maven/commons-collections/jars/commons-collections-2.1.jar">
    </get>
    <get dest="${libdir}/nanning-0.8.jar" usetimestamp="true" ignoreerrors="true" src="http://www.ibiblio.org/maven/nanning/jars/nanning-0.8.jar">
    </get>
    <get dest="${libdir}/servletapi-2.3.jar" usetimestamp="true" ignoreerrors="true" src="http://www.ibiblio.org/maven/servletapi/jars/servletapi-2.3.jar">
    </get>
    <get dest="${libdir}/webwork-1.3.jar" usetimestamp="true" ignoreerrors="true" src="http://www.ibiblio.org/maven/webwork/jars/webwork-1.3.jar">
    </get>
    <get dest="${libdir}/commons-digester-1.4.1.jar" usetimestamp="true" ignoreerrors="true" src="http://www.ibiblio.org/maven/commons-digester/jars/commons-digester-1.4.1.jar">
    </get>
    <get dest="${libdir}/commons-logging-1.0.1.jar" usetimestamp="true" ignoreerrors="true" src="http://www.ibiblio.org/maven/commons-logging/jars/commons-logging-1.0.1.jar">
    </get>
    <get dest="${libdir}/commons-beanutils-1.6.1.jar" usetimestamp="true" ignoreerrors="true" src="http://www.ibiblio.org/maven/commons-beanutils/jars/commons-beanutils-1.6.1.jar">
    </get>
    <get dest="${libdir}/junit-3.8.1.jar" usetimestamp="true" ignoreerrors="true" src="http://www.ibiblio.org/maven/junit/jars/junit-3.8.1.jar">
    </get>
    <get dest="${libdir}/ant-1.5.jar" usetimestamp="true" ignoreerrors="true" src="http://www.ibiblio.org/maven/ant/jars/ant-1.5.jar">
    </get>
    <get dest="${libdir}/ant-optional-1.5.jar" usetimestamp="true" ignoreerrors="true" src="http://www.ibiblio.org/maven/ant/jars/ant-optional-1.5.jar">
    </get>
  </target>
  <target name="install-maven">
    <get dest="${user.home}/maven-install-latest.jar" usetimestamp="true" src="${repo}/maven/maven-install-latest.jar">
    </get>
    <unjar dest="${maven.home}" src="${user.home}/maven-install-latest.jar">
    </unjar>
  </target>

  <target name="cvs:make-patch" description="Creates a patch of *your* changes">
    <cvs command="-q diff -b -u -N" output="patch.txt"/>
    <echo>
      Please create a new issue in NanoContainer's JIRA: 
      http://jira.codehaus.org/secure/BrowseProject.jspa?id=10121
      Then attach the patch.txt file.
      If your patch consists of entirely new files too, please zip them
      up and attach them too.
      
      If your patch includes JUnit tests and a decent description,
      you increase the chance of having the patch applied by some
      of the committers.
    </echo>    
  </target>

  <target name="cvsgrab" description="download sources with CVSGrab">
    <taskdef 
      name="cvsgrab" 
      classname="net.sourceforge.cvsgrab.CVSGrabTask" 
      classpath="${cvsgrab.home}/lib/cvs-grab.jar;${cvsgrab.home}/lib/hotsax.jar;${cvsgrab.home}/lib/jcvsii-light.jar"/>

    <cvsgrab 
      destdir="${basedir}/.."
      rootUrl="http://nanocontainer.cvs.codehaus.org/"
      cvsHost="cvs.codehaus.org"
      cvsRoot="/cvsroot/nanocontainer"
      package="nano" 
      verbose="true"
      tag="HEAD"/>
  </target>
</project>