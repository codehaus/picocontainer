<html>
    <head>
        <title>Used technologies</title>
    </head>
    <body>
        <h4>
            HTML Rendering
        </h4>
        <p>
            HTML Rendering is done via <a href="$url.setPage('http://jakarta.apache.org/velocity/')">Jakarta velocity</a>.
            Produced HTML is processed through <a href="$url.setPage('http://www.opensymphony.com/sitemesh/')">Sitemesh filter</a>
            to decorate pages with common navigation functions and provide 
            common layout features. ( For example navigation menues, advertising 
            bannerers, headers, footers ).  This saves a lot of work for HTML 
            Template writers. Velocity templating engine is hooked up to IoC 
            container hierarchy and MVC Framework.
        </p>
        <h4>MVC Framework</h4>
        <p>
            We used Webwork 1.4  because it is simple and powerfull MVC Framework. 
            It integrates well with different templating engines and IoC framewoks.
            WebWork actions are just java classes, and generally not aware of 
            servlet container. This allows easy unit testing while developing. 
        </p>
        <h4>Page decoration</h4>
        <p> 
            Sitemesh is powerfull servlet filter providing web page decoration, 
            and simplifies template depeloment. 
        </p>
        <h4>O/R Mapping</h4>
        <p>
            We use <b>Hibernate</b> object-relational mapping engine. It allows
            rapid development of database applications. It supports wide variety 
            of object relations and target databases. 
        </p>
        <h4>Inversion of Control</h4>
        <p>
            <b>Inversion of Control</b> can greatly simplify development 
            of software. You can develop simple nd manageable components, which 
            do not know ( and do not care ) about how other components they 
            depend on are created, or where to get them. All dependencies are 
            resolved by container. This paradigm eliminates a lot of configuration 
            and management code - thus saving time and money.
        </p>
        <p>
            We used <b>Pico/Nanocontainer</b> for this puprose. And we are also 
            writing it.  Pico/Nanocontaienr allows <b>constructor dependency 
            injection</b> formely known as "Type 3". Main advantage of this type
            of DI is well defined initialisation time frame - you can not use
            object before it has left constructor, and object is ready when you
            get it. Setter dependency injection can have problem with order of 
            setters to be caled, and does not provide clear point when object is 
            ready. It also does not enforce that all dependencies are provided.
        </p>
        <h4>Source generation with XDoclet</h4>
        <p>
            There is always a lot of routine repetitive work. And sometimes a 
            lot of work which is not welll suited for humans. For example - EJB
            deployment descriptors, writing hibernate mappings, webwork 
            action configuration... We delegate this work to XDoclet. It produces
            necessary files for us from metadata placed in  javadocs of source 
            classes. ( Hibernate mapping declarations, webwork action setup ).
            Sometimes it can save bout 80% of code, which does not have to be 
            written, and will not contin bugs. 
        </p>
        <p>
            We are experts in automatical source and configuration generation 
            with xdoclet. We are writing it. 
        </p>
        
        <h4>Project management</h4>
        <p>
            We use maven as compilation environment. It has clear advantages over IDEs
            and ant. ( It is also integrated in several IDEs as conpilation system ) 
            <ul>
                <li>
                    It takes care of dependency management, and ensures that all 
                    members of development team work with same versions of libraries
                </li>
                <li>
                    It is easier to configure than ant ( writing ant/make scripts, 
                    is not a trivial task )
                </li>
                <li>
                    It supports ( and forces... ) test driven development. Unit tests can be
                    integrated ( and in this case were integrated ) in project source code,
                    and are executed by every build.
                </li>
                <li>
                    It produces reports for project manager / leader - developer workload, 
                    test coverage, code critiques etc. in form of handy website which can 
                    be deployed on development server and used by whole team. 
                </li>
            </ul>
        </p>
    </body>
</html>
